rules_version = '2';

// Returns true if the uploaded file is an image and its size is below the given number of MB.
function isFileBelowMaxSize(maxSizeMB) {
  return request.resource.size < maxSizeMB * 1024 * 1024
}

function isImageBelowMaxSize(maxSizeMB) {
  return isFileBelowMaxSize(maxSizeMB)
      && request.resource.contentType.matches('image/.*');
}

function isUserFileNameAllowed(fileName) {
    return fileName == 'profileImage.png';
}

function isCreatorFileNameAllowed(fileName) {
    return fileName == 'profileImage.png' || 
      fileName == 'coverImage.png' ||
      fileName == 'tierImage.png';
}

function isNftFileNameAllowed(fileName) {
    return fileName == 'i.png' || 
      fileName == 'm.json';
}

service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId}/{fileName} {
      allow write: if request.auth != null 
                   && request.auth.uid == userId 
                   && isImageBelowMaxSize(10)
                   && isUserFileNameAllowed(fileName);
      allow read: if true;
    }
    match /n/{userId}/{cId}/{fileName} {
      allow write: if request.auth != null 
                   && request.auth.uid[0:10] == userId[0:10]
                   && isNftFileNameAllowed(fileName);
      allow read: if true;
    }

    match /creators/{userId}/profile/{fileName} {
      allow write: if request.auth != null 
                   && request.auth.uid == userId 
                   && isImageBelowMaxSize(10)
                   && isCreatorFileNameAllowed(fileName);
      allow read: if true;
    }

    //  function isYourDocument(userId){
    //   return request.auth != null && request.auth.uid == userId;
    //   }
    //  function isMember(cId){
    //    return request.auth.token[cId] > request.time.toMillis();
    //  }
    match /posts/{cId}/{postId}/attachment/{attachmentName} {
      allow create, update: if request.auth != null 
                   && request.auth.uid == cId 
                   && isFileBelowMaxSize(20);

      allow delete: if request.auth != null 
                   && request.auth.uid == cId ;

      allow read: if (request.auth != null && request.auth.uid == cId) ;  
                     // request.auth.token[cId] > request.time.toMillis();
    }


    match /defaults/{file} {
      allow write: if false
      allow read: if true;
    }
  }
}